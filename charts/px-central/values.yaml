persistentStorage:
  enabled: true
  storageClassName:
  cassandra:
    storage: 64Gi
  grafana:
    storage: 20Gi
  consul:
    storage: 8Gi
  alertManager:
    storage: 2Gi
  ingester:
    storage: 2Gi
  mysqlVolumeSize: "100Gi"
  mongodbVolumeSize: "64Gi"
  mongoCacheSize: 4
  keycloakThemeVolumeSize: "5Gi"
  keycloakBackendVolumeSize: "10Gi"

storkRequired: false
nodeAffinityLabel: ""
podAntiAffinity: false

pxcentralDBPassword: Password1
caCertsSecretName: ""

oidc:
  centralOIDC:
    enabled: true
    defaultUsername: admin
    defaultPassword: admin
    defaultEmail: admin@portworx.com
    keyCloakBackendUserName: keycloak
    keyCloakBackendPassword: keycloak
    clientId: "pxcentral"
    updateAdminProfile: true

  externalOIDC:
    enabled: false
    clientID:
    clientSecret:
    endpoint:

postInstallJob:
  sslEnabled: true

pxbackup:
  enabled: false
  orgName: default
  callHome: true
  mongoMigration: complete

pxlicenseserver:
  enabled: false
  internal:
    enabled: true
    lsTypeUAT: false
    lsTypeAirgapped: false
  external:
    enabled: false
  mainNodeIP: ""
  backupNodeIP: ""
  adminUserName: admin
  adminUserPassword: Adm1n!Ur

pxmonitor:
  enabled: false
  pxCentralEndpoint:
  sslEnabled: false
  oidcClientID: pxcentral
  consulBindInterface: ""
  cortex:
    alertmanager:
      advertiseAddress: ""

service:
  pxCentralUIServiceType: "LoadBalancer"
  ## To set the LoadBalancer service type to internal only
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  pxCentralUIServiceAnnotations: {}
  pxBackupUIServiceType: "LoadBalancer"
  pxBackupUIServiceAnnotations: {}
  grafanaServiceType: "NodePort"
  cortexNginxServiceType: "NodePort"

## Memory settings: These are calculated automatically unless specified otherwise
## To run on environments with little resources (<= 8GB), tune your heap settings:
## maxHeapSize:
## - calculate 1/2 ram and cap to 1024MB
## - calculate 1/4 ram and cap to 8192MB
## - pick the max
## newHeapSize:
## A good guideline is 100 MB per CPU core.
## - min(100 * num_cores, 1/4 * heap size)
##
# maxHeapSize: 4G
# newHeapSize: 800M

cassandra:
  jvm:
    maxHeapSize:
    newHeapSize:

installCRDs: false
clusterDomain: "cluster.local"
cassandraUsername: cassandra
cassandraPassword: cassandra

operatorToChartUpgrade: false

securityContext:
  runAsUser: 1000
  fsGroup: 1000
  runAsNonRoot: true

images:
  pullSecrets:
    - docregistry-secret
  pullPolicy: Always

  pxcentralApiServerImage:
    registry: docker.io
    repo: portworx
    imageName: pxcentral-onprem-api-base
    tag: 2.2.1-dev
  pxcentralFrontendImage:
    registry: docker.io
    repo: portworx
    imageName: pxcentral-onprem-ui-frontend-private
    tag: 2.2.1-dev
  pxcentralBackendImage:
    registry: docker.io
    repo: portworx
    imageName: pxcentral-onprem-ui-backend-private
    tag: 2.2.1-dev
  pxcentralMiddlewareImage:
    registry: docker.io
    repo: portworx
    imageName: pxcentral-onprem-ui-lhbackend-private
    tag: 2.2.1-dev
  postInstallSetupImage:
    registry: docker.io
    repo: portworx
    imageName: pxcentral-onprem-post-setup-base
    tag: 2.2.1-dev
  keycloakBackendImage:
    registry: docker.io
    repo: portworx
    imageName: postgresql
    tag: 11.13.0-debian-10-r19
  keycloakFrontendImage:
    registry: docker.io
    repo: portworx
    imageName: keycloak
    tag: 14.0.0-v2
  keycloakLoginThemeImage:
    registry: docker.io
    repo: portworx
    imageName: keycloak-login-theme
    tag: 2.0.1
  keycloakInitContainerImage:
    registry: docker.io
    repo: portworx
    imageName: busybox
    tag: 1.31
  mysqlImage:
    registry: docker.io
    repo: portworx
    imageName: mysql
    tag: 5.7.37

  ## Images required for enabling px-backup
  pxBackupImage:
    registry: docker.io
    repo: portworx
    imageName: px-backup-base
    tag: 2.2.1-dev
  mongodbImage:
    registry: docker.io
    repo: portworx
    imageName: mongodb
    tag: 4.4.14-debian-10-r22 

  ## Images required for enabling px-license-server
  licenseServerImage:
    registry: docker.io
    repo: portworx
    imageName: px-els
    tag: 2.0.1

  ## Images required for enabling px-monitor
  cortexImage:
    registry: docker.io
    repo: portworx
    imageName: cortex
    tag: v1.1.0
  cassandraImage:
    registry: docker.io
    repo: portworx
    imageName: cassandra
    tag: 3.11.6-debian-10-r153
  proxyConfigImage:
    registry: docker.io
    repo: portworx
    imageName: nginx
    tag: 1.22.0-alpine
  consulImage:
    registry: docker.io
    repo: portworx
    imageName: consul
    tag: 1.9.5-debian-10-r18
  dnsmasqImage:
    registry: docker.io
    repo: portworx
    imageName: go-dnsmasq
    tag: release-1.0.7-v2
  grafanaImage:
    registry: docker.io
    repo: portworx
    imageName: grafana
    tag: 8.5.3
  prometheusImage:
    registry: docker.io
    repo: portworx
    imageName: prometheus
    tag: v2.29.1
  prometheusConfigReloadrImage:
    registry: docker.io
    repo: portworx
    imageName: prometheus-config-reloader
    tag: v0.50.0
  prometheusOperatorImage:
    registry: docker.io
    repo: portworx
    imageName: prometheus-operator
    tag: v0.50.0
  memcachedMetricsImage:
    registry: docker.io
    repo: portworx
    imageName: memcached-exporter
    tag: v0.9.0
  memcachedIndexImage:
    registry: docker.io
    repo: portworx
    imageName: memcached
    tag: 1.6.15-alpine
  memcachedImage:
    registry: docker.io
    repo: portworx
    imageName: memcached
    tag: 1.6.15-alpine

## Configuration for cortex
cortexConfig:
  alertmanager:
    external_url: /api/prom/alertmanager
  auth_enabled: false
  chunk_store:
    chunk_cache_config:
      memcached:
        expiration: 1h
      memcached_client:
        timeout: 1s
    max_look_back_period: 0s
  distributor:
    pool:
      health_check_ingesters: true
    shard_by_all_labels: true
  frontend:
    compress_responses: true
    log_queries_longer_than: 10s
  ingester:
    lifecycler:
      final_sleep: 0s
      join_after: 0s
      num_tokens: 512
      ring:
        kvstore:
          consul:
            consistent_reads: true
            host: pxcentral-cortex-consul:8500
            http_client_timeout: 20s
          prefix: collectors/
          store: consul
        replication_factor: 1
    max_transfer_retries: 0
  ingester_client:
    grpc_client_config:
      max_recv_msg_size: 104857600
      max_send_msg_size: 104857600
      use_gzip_compression: true
  limits:
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h
  querier:
    active_query_tracker_dir: /data/cortex/querier
    query_ingesters_within: 1h
  query_range:
    align_queries_with_step: true
    cache_results: true
    results_cache:
      cache:
        memcached:
          expiration: 1h
        memcached_client:
          timeout: 1s
    split_queries_by_interval: 24h
  ruler:
    enable_alertmanager_discovery: false
  schema:
    configs:
    - from: "2019-07-29"
      index:
        period: 24h
        prefix: index_
      chunks:
        prefix: chunk_
        period: 24h
      object_store: cassandra
      schema: v10
      store: cassandra
  server:
    grpc_listen_port: 9095
    grpc_server_max_concurrent_streams: 1000
    grpc_server_max_recv_msg_size: 104857600
    grpc_server_max_send_msg_size: 104857600
    http_listen_port: 8080
  storage:
    azure:
      account_key: null
      account_name: null
      container_name: null
    cassandra:
      addresses: pxcentral-cortex-cassandra:9042
      auth: true
      keyspace: cortex
      password: cassandra
      username: cassandra
      timeout: 10s
      connect_timeout: 10s
      max_retries: 3
    engine: chunks
    index_queries_cache_config:
      memcached:
        expiration: 1h
      memcached_client:
        timeout: 1s
  table_manager:
    retention_deletes_enabled: true
    retention_period: 192h
