{{- $customRegistryURL := .Values.customRegistryURL | default "none" }}
{{- $registrySecret := .Values.registrySecret | default "none" }}

apiVersion: batch/v1
kind: Job
metadata:
  namespace: kube-system
  name: px-hook-etcd-preinstall
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
{{ if semverCompare ">= 1.8" .Capabilities.KubeVersion.GitVersion }}
  backoffLimit: 0
{{ else }}
  activeDeadlineSeconds: 30
{{ end }}
  template:
    spec:
      {{- if not (eq $registrySecret "none") }}
      imagePullSecrets:
        - name: {{ $registrySecret }}
      {{- end }}   
      restartPolicy: Never
      containers:
      - name: pre-install-job
        terminationMessagePath: '/dev/termination-log'    
        terminationMessagePolicy: 'FallbackToLogsOnError'        
        imagePullPolicy: Always

        {{- if eq $customRegistryURL "none" }}
        image: "hrishi/px-etcd-preinstall-hook:v2"
        {{- else}}
        image: "{{ $customRegistryURL }}/hrishi/px-etcd-preinstall-hook:v2"
        {{- end}}
        
        {{- if (not .Values.etcd.certPath) and  (not eq .Values.etcd.certPath "none") }}
        command: ['/bin/bash']
        args: ['/usr/bin/etcdStatus.sh',"{{ .Values.etcdEndPoint }}","{{.Values.etcd.ca}}","{{.Values.etcd.cert}}","{{.Values.etcd.key}}"]
        volumeMounts:
        - mountPath: {{.Values.etcd.certPath}}
          name: etcdcerts
      volumes:
      - name: etcdcerts
        secret:
          secretName: px-etcd-certs
          items:
          - key: ca.crt
            path: ca.crt
          - key: client.crt
            path: client.crt
          - key: client.key
            path: client.key
        {{- else}}
        command: ['/bin/bash']
        args: ['/usr/bin/etcdStatus.sh',"{{ .Values.etcdEndPoint }}"]
        {{- end}}