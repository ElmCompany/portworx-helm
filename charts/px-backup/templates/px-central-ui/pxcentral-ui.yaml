{{/* Setting defaults if they are omitted. */}}
{{- $customRegistryEnabled := .Values.customeRegistryEnabled | default false }}
{{- $externalPersistentStorageEnabled := .Values.persistentStorage.enabled | default false }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-frontend-nginx-config
  namespace: {{ .Values.namespace }} 
  labels:
{{- include "px-backup.labels" . | nindent 4 }}
data:
  default.conf: |
    # Add upstream for letsencrypt job

    server {

      listen  80;
      server_name localhost;

      #charset koi8-r;
      #access_log  /var/log/nginx/host.access.log  main;

      location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
      }

      #error_page  404              /404.html;
      error_page 404 =200 /index.html;

      # redirect server error pages to the static page /50x.html
      #
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
      root   /usr/share/nginx/html;
      }

      # proxy the PHP scripts to Apache listening on 127.0.0.1:80
      #
      #location ~ \.php$ {
      #    proxy_pass   http://127.0.0.1;
      #}

      # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
      #
      #location ~ \.php$ {
      #    root           html;
      #    fastcgi_pass   127.0.0.1:9000;
      #    fastcgi_index  index.php;
      #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
      #    include        fastcgi_params;
      #}

      # deny access to .htaccess files, if Apache's document root
      # concurs with nginx's one
      #
      #location ~ /\.ht {
      #    deny  all;
      #}


    }
---
{{- if eq $externalPersistentStorageEnabled true }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pxcentral-mysql-pvc
  namespace: {{ .Values.namespace }} 
  labels:
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: {{ .Values.persistentStorage.storageClassName }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-backend
  namespace: {{ .Values.namespace }} 
  labels:
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      run: pxcentral-backend
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-backend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.nodeAffinityKey }}
                operator: NotIn
                values:
                - "{{ .Values.nodeAffinityValue }}"
      containers:
        - name: pxcentral-backend
          image: {{ printf "%s/%s/%s:%s" .Values.dockerRegistryURL .Values.dockerImageRepoName .Values.images.pxcentralBackendImage.imageName .Values.images.pxcentralBackendImage.tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: pxcentral-ui-configmap
          resources: {}
      {{- if eq $customRegistryEnabled true }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-frontend
  namespace: {{ .Values.namespace }}
  labels:
{{- include "px-backup.labels" . | nindent 4 }} 
spec:
  selector:
    matchLabels:
      run: pxcentral-frontend
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-frontend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.nodeAffinityKey }}
                operator: NotIn
                values:
                - "{{ .Values.nodeAffinityValue }}"
      containers:
        - name: pxcentral-frontend
          image: {{ printf "%s/%s/%s:%s" .Values.dockerRegistryURL .Values.dockerImageRepoName .Values.images.pxcentralFrontendImage.imageName .Values.images.pxcentralFrontendImage.tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name : http
              containerPort: 80
            - name: https
              containerPort: 443
          envFrom:
            - configMapRef:
                name: pxcentral-ui-configmap
          volumeMounts:
            - name: frontend-nginx-configs
              mountPath: /etc/nginx/conf.d
          resources: {}
      volumes:
        - name: frontend-nginx-configs
          configMap:
            name: pxcentral-frontend-nginx-config
      {{- if eq $customRegistryEnabled true }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    run: pxcentral-mysql
{{- include "px-backup.labels" . | nindent 4 }}
  name: pxcentral-mysql
  namespace: {{ .Values.namespace }} 
spec:
  selector:
    matchLabels:
      run: pxcentral-mysql
  replicas: 1
  serviceName: pxcentral-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pxcentral-mysql
        run: pxcentral-mysql
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.nodeAffinityKey }}
                operator: NotIn
                values:
                - "{{ .Values.nodeAffinityValue }}"
      {{- if eq .Values.storkRequired true }}
      schedulerName: stork
      {{- end }}
      containers:
        - name: mysql
          {{- if eq $customRegistryEnabled true }}
          image: {{ printf "%s/%s/mysql:5.7.22" .Values.dockerRegistryURL .Values.dockerImageRepoName }}
          {{- else }}
          image: "mysql:5.7.22"
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          args:
            - "--ignore-db-dir=lost+found"
          tty: true
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: pxcentral-ui-configmap
                  key: DB_DATABASE
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: pxcentral-ui-configmap
                  key: DB_PASSWORD
            - name: SERVICE_NAME
              value: pxcentral-mysql
            - name: SERVICE_TAGS
              value: dev
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["mysqladmin", "ping", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: pxcentral-mysql
      volumes:
        - name: pxcentral-mysql
          {{- if eq $externalPersistentStorageEnabled true }}
          persistentVolumeClaim:
            claimName: pxcentral-mysql-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- if eq $customRegistryEnabled true }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: pxcentral-mysql
    run: pxcentral-mysql
{{- include "px-backup.labels" . | nindent 4 }}
  name: pxcentral-mysql
  namespace: {{ .Values.namespace }} 
spec:
  selector:
    run: pxcentral-mysql
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306

---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-frontend
  namespace: {{ .Values.namespace }} 
  labels:
    run: pxcentral-frontend
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  selector:
    run: pxcentral-frontend
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-backend
  namespace: {{ .Values.namespace }} 
  labels:
    run: pxcentral-backend
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  selector:
    run: pxcentral-backend
  ports:
    - name: port1
      port: 80
      targetPort: 80
      protocol: TCP
---